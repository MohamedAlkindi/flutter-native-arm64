name: Build Flutter SDK (ARM64 Host, Android + Web only via QEMU)

on:
  workflow_dispatch:

jobs:
  build-flutter-sdk:
    runs-on: ubuntu-latest
    env:
      WORKSPACE: /workspace

    steps:
      - name: Enable QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: arm64

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Step 1: Clone Flutter
      - name: Clone Flutter SDK
        run: |
          mkdir -p $WORKSPACE
          docker run --rm --platform linux/arm64 \
            -v $WORKSPACE:$WORKSPACE \
            -w $WORKSPACE \
            arm64v8/ubuntu:22.04 bash -c "
              apt-get update
              apt-get install -y git curl ca-certificates
              update-ca-certificates
              if [ ! -d flutter ]; then
                git clone https://github.com/flutter/flutter.git -b stable --depth 1 flutter
              fi
              echo '‚úÖ Flutter SDK cloned'
            "

      # Step 2: Bootstrap Dart SDK & Flutter doctor
      - name: Bootstrap Dart SDK
        run: |
          docker run --rm --platform linux/arm64 \
            -v $WORKSPACE:$WORKSPACE \
            -w $WORKSPACE/flutter \
            arm64v8/ubuntu:22.04 bash -c "
              apt-get update
              apt-get install -y python3 file openjdk-17-jdk clang unzip xz-utils zip
              
              # Bootstrap Dart SDK
              ./bin/cache/dart-sdk/bin/dart --version || true
              echo '‚úÖ Dart SDK bootstrapped'

              # Flutter doctor
              ./bin/flutter --verbose --no-version-check doctor
              echo '‚úÖ Flutter host verified'
            "

      # Step 3: Precache Web SDK
      - name: Precache Web SDK
        run: |
          docker run --rm --platform linux/arm64 \
            -v $WORKSPACE:$WORKSPACE \
            -w $WORKSPACE/flutter \
            arm64v8/ubuntu:22.04 bash -c "
              apt-get update
              apt-get install -y python3 file unzip xz-utils zip
              ./bin/flutter precache --web
              echo '‚úÖ Web SDK artifacts ready'
            "

      # Step 4: Precache Android engine artifacts
      - name: Precache Android SDK & engine
        run: |
          docker run --rm --platform linux/arm64 \
            -v $WORKSPACE:$WORKSPACE \
            -w $WORKSPACE/flutter \
            arm64v8/ubuntu:22.04 bash -c "
              apt-get update
              apt-get install -y python3 file unzip xz-utils zip
              ./bin/flutter precache --android
              echo '‚úÖ Android engine artifacts ready'
            "

      # Step 5: Verify Dart SDK binaries
      - name: Verify Dart SDK binaries
        run: |
          docker run --rm --platform linux/arm64 \
            -v $WORKSPACE:$WORKSPACE \
            -w $WORKSPACE/flutter \
            arm64v8/ubuntu:22.04 bash -c "
              apt-get update
              apt-get install -y file
              echo 'üîç Verifying Dart SDK binaries for ARM64...'
              find bin/cache/dart-sdk/bin -type f -executable | while read f; do
                if file \"\$f\" | grep -q ELF; then
                  echo \"üîç Checking \$f\"
                  if ! file \"\$f\" | grep -q 'ARM aarch64'; then
                    echo \"‚ùå Non-ARM64 Dart binary: \$f\"
                    file \"\$f\"
                    exit 1
                  fi
                fi
              done
              echo '‚úÖ All Dart SDK binaries are ARM64'
            "

      # Step 6: Verify Flutter engine binaries
      - name: Verify Flutter engine binaries
        run: |
          docker run --rm --platform linux/arm64 \
            -v $WORKSPACE:$WORKSPACE \
            -w $WORKSPACE/flutter \
            arm64v8/ubuntu:22.04 bash -c "
              apt-get update
              apt-get install -y file
              echo 'üîç Verifying Flutter engine binaries for ARM64...'
              find bin/cache/artifacts/engine/linux-arm64 -type f | while read f; do
                if file \"\$f\" | grep -q ELF; then
                  echo \"üîç Checking \$f\"
                  if ! file \"\$f\" | grep -q 'ARM aarch64'; then
                    echo \"‚ùå Non-ARM64 engine binary: \$f\"
                    file \"\$f\"
                    exit 1
                  fi
                fi
              done
              echo '‚úÖ All Flutter engine binaries are ARM64'
            "

      # Step 7: Strip unnecessary platforms
      - name: Strip unused platforms
        run: |
          docker run --rm --platform linux/arm64 \
            -v $WORKSPACE:$WORKSPACE \
            -w $WORKSPACE/flutter \
            arm64v8/ubuntu:22.04 bash -c "
              rm -rf bin/cache/artifacts/engine/darwin-*
              rm -rf bin/cache/artifacts/engine/windows-*
              rm -rf bin/cache/artifacts/engine/linux-x64
              rm -rf bin/cache/artifacts/engine/fuchsia-*
              rm -rf bin/cache/artifacts/engine/ios-*
              echo '‚úÖ Unnecessary platforms stripped'
            "

      # Step 8: Package SDK
      - name: Package Flutter SDK
        run: |
          docker run --rm --platform linux/arm64 \
            -v $WORKSPACE:$WORKSPACE \
            -w $WORKSPACE \
            arm64v8/ubuntu:22.04 bash -c "
              tar -czf /workspace/flutter_linux_arm64_android_web_sdk.tar.gz flutter
              echo '‚úÖ Super-lean ARM64 Flutter SDK packaged at /workspace/flutter_linux_arm64_android_web_sdk.tar.gz'
            "

      # Step 9: Upload artifact
      - name: Upload Flutter SDK artifact
        uses: actions/upload-artifact@v4
        with:
          name: flutter_linux_arm64_android_web_sdk
          path: flutter_linux_arm64_android_web_sdk.tar.gz
