name: Flutter ARM64 Full SDK (Android + Web)

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-22.04

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: all

      - name: Build and Package ARM64 Flutter SDK
        run: |
          cat <<EOF > Dockerfile
          FROM --platform=linux/arm64 ubuntu:22.04 as builder

          WORKDIR /app

          # Install all necessary dependencies for a headless Flutter build
          RUN apt-get update && apt-get install -y --no-install-recommends \
              ca-certificates \
              git unzip curl xz-utils zip python3 clang cmake ninja-build pkg-config \
              libgtk-3-dev liblzma-dev libssl-dev libcurl4-openssl-dev libfreetype6-dev \
              libfontconfig1-dev libc6-dev gcc g++ make file wget jq

          # Clone the Flutter stable branch
          RUN git clone https://github.com/flutter/flutter.git -b stable --depth 1 flutter

          # Use the pre-cache command to download and compile all artifacts for the target ARM64 architecture
          # This is the most crucial step as it pulls down the correct binaries.
          WORKDIR /app/flutter
          RUN ./bin/flutter precache --android --web --no-linux --no-ios --no-windows --no-macos --force

          # Remove unnecessary files to reduce the final SDK size
          RUN rm -rf examples/ dev/ docs/ && \
              rm -rf bin/cache/pkg

          # Package the final SDK.
          RUN zip -r9 ../flutter-arm64-full-sdk.zip .

          FROM --platform=linux/arm64 scratch
          COPY --from=builder /app/flutter-arm64-full-sdk.zip /flutter-arm64-full-sdk.zip
          
          CMD ["/bin/true"]
          EOF

          # Build the Docker image and load it to the host machine, specifying the target platform.
          docker buildx build --platform linux/arm64 -t flutter-arm64-builder --load .

          # Create a container from the built image and copy the artifact
          docker create --name flutter-temp-container flutter-arm64-builder
          docker cp flutter-temp-container:/flutter-arm64-full-sdk.zip .
          docker rm flutter-temp-container

      - name: Verify the output is ARM64
        run: |
          unzip flutter-arm64-full-sdk.zip -d flutter-sdk-unzip
          # Check for any ELF binary that is NOT aarch64
          if find flutter-sdk-unzip -type f -exec file {} + | grep 'ELF.*executable' | grep -v 'aarch64'; then
            echo "Error: Found a non-ARM64 binary!"
            exit 1
          else
            echo "All ELF binaries are aarch64. The SDK is native to ARM64."
          fi

      - name: Generate SHA256 checksums
        run: sha256sum flutter-arm64-full-sdk.zip > flutter-arm64-full-sdk.zip.sha256

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: flutter-arm64-full-sdk
          path: |
            flutter-arm64-full-sdk.zip
            flutter-arm64-full-sdk.zip.sha256
