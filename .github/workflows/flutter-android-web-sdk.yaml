name: Flutter ARM64 Full Native Android + Web SDK

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-22.04

    steps:
      # Step 1: Install dependencies
      - name: 游릴 Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            git unzip curl xz-utils zip python3 clang cmake ninja-build pkg-config \
            libgtk-3-dev liblzma-dev libssl-dev libcurl4-openssl-dev libfreetype6-dev \
            libfontconfig1-dev libc6-dev gcc g++ make file wget

      # Step 2: Clone Flutter stable
      - name: 游릴 Clone Flutter
        run: |
          git clone https://github.com/flutter/flutter.git -b stable --depth 1 flutter

      # Step 3: Fetch Flutter's exact Dart sources
      - name: 游릴 Fetch Flutter Dart
        run: |
          cd flutter
          ./bin/internal/update_dart_sdk.sh
          cd ..

      # Step 4: Setup depot_tools
      - name: 游릴 Setup depot_tools
        run: |
          git clone https://chromium.googlesource.com/chromium/tools/depot_tools.git
          export PATH="$PATH:$(pwd)/depot_tools:$PATH"

      # Step 5: Build Dart SDK for ARM64
      - name: 游릴 Build Dart SDK ARM64
        run: |
          cd flutter/bin/cache/dart-sdk
          ./tools/build.py --mode release --arch arm64 create_sdk
          cd ../../..

      # Step 6: Replace Flutter Dart SDK with ARM64 build
      - name: 游릴 Replace Dart SDK
        run: |
          rm -rf flutter/bin/cache/dart-sdk
          mv flutter/bin/cache/dart-sdk/out/ReleaseARM64 flutter/bin/cache/dart-sdk

      # Step 7: Precache engines (include Linux host temporarily)
      - name: 游릴 Precache engines for snapshot
        run: |
          cd flutter
          ./bin/flutter precache --linux --android --web --no-ios --no-windows --no-macos

      # Step 8: Build Flutter CLI snapshot for ARM64
      - name: 游릴 Build Flutter CLI snapshot
        run: |
          cd flutter
          ./bin/cache/dart-sdk/bin/dart \
            --snapshot=bin/cache/flutter_snapshot.dart \
            --snapshot-kind=app-aot-arm64 \
            -o bin/cache/flutter_aot_snapshot.arm64
          file bin/cache/flutter_aot_snapshot.arm64

      # Step 9: Trim all non-ARM64 binaries
      - name: 游릴 Trim SDK to ARM64 only
        run: |
          cd flutter
          rm -rf examples/ dev/ docs/
          rm -rf bin/cache/pkg
          # Remove host artifacts now that snapshot exists
          rm -rf bin/cache/artifacts/engine/linux-*
          rm -rf bin/cache/artifacts/engine/windows-*
          rm -rf bin/cache/artifacts/engine/darwin-*
          rm -rf bin/cache/artifacts/engine/ios
          # Verify no x64 binaries remain
          find bin/cache -type f -exec file {} \; | grep "x86_64" && echo "ERROR: x64 binary found!" && exit 1 || echo "No x64 binaries detected"

      # Step 10: Package Flutter ARM64 SDK
      - name: 游릴 Package SDK
        run: |
          cd flutter
          zip -r9 ../flutter-arm64-full-sdk.zip .

      # Step 11: Verify final ZIP is ARM64 only
      - name: 游릴 Verify ARM64
        run: |
          unzip -q ../flutter-arm64-full-sdk.zip -d flutter-sdk-unzip
          find flutter-sdk-unzip -type f -exec file {} \; | grep "x86_64" && echo "ERROR: x64 binary found in ZIP!" && exit 1 || echo "ZIP is fully ARM64-native"

      # Step 12: Generate SHA256 checksums
      - name: 游릴 Generate SHA256 checksums
        run: |
          cd flutter-sdk-unzip
          find . -type f -exec sha256sum {} \; > ../flutter-sdk-checksums.txt
          echo "SHA256 checksums generated"

      # Step 13: Upload artifacts
      - name: 游릴 Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: flutter-arm64-full-sdk
          path: |
            flutter-arm64-full-sdk.zip
            flutter-sdk-checksums.txt
