name: Flutter ARM64 Full Native Android + Web SDK

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-22.04

    steps:
      # Step 1: Install all dependencies
      - name: 游릴 Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            git unzip curl xz-utils zip python3 clang cmake ninja-build pkg-config \
            libgtk-3-dev liblzma-dev libssl-dev libcurl4-openssl-dev libfreetype6-dev \
            libfontconfig1-dev libc6-dev gcc g++ make file wget

      # Step 2: Clone Flutter stable
      - name: 游릴 Clone Flutter
        run: |
          git clone https://github.com/flutter/flutter.git -b stable --depth 1 flutter

      # Step 3: Clone Dart SDK
      - name: 游릴 Clone Dart SDK
        run: |
          git clone https://github.com/dart-lang/sdk.git dart-sdk-src

      # Step 4: Install depot_tools and GN
      - name: 游릴 Setup depot_tools and GN
        run: |
          git clone https://chromium.googlesource.com/chromium/tools/depot_tools.git
          export PATH="$PATH:$(pwd)/depot_tools"
          cd dart-sdk-src
          python3 tools/gn/bootstrap.py
          cd ..

      # Step 5: Build Dart SDK for ARM64
      - name: 游릴 Build Dart SDK for ARM64
        run: |
          cd dart-sdk-src
          ./tools/build.py --mode release --arch arm64 create_sdk
          cd ..
          rm -rf flutter/bin/cache/dart-sdk
          mv dart-sdk-src/out/ReleaseARM64 flutter/bin/cache/dart-sdk

      # Step 6: Build Flutter CLI snapshot for ARM64
      - name: 游릴 Build Flutter CLI snapshot
        run: |
          cd flutter
          ./bin/cache/dart-sdk/bin/dart \
            --snapshot=bin/cache/flutter_snapshot.dart \
            --snapshot-kind=app-aot-arm64 \
            -o bin/cache/flutter_aot_snapshot.arm64
          # Verify snapshot architecture
          file bin/cache/flutter_aot_snapshot.arm64

      # Step 7: Precache Android + Web engines (ARM64-only)
      - name: 游릴 Precache Android + Web
        run: |
          cd flutter
          ./bin/flutter precache --android --web --no-linux --no-ios --no-windows --no-macos

      # Step 8: Trim SDK to minimal ARM64
      - name: 游릴 Trim SDK to minimal ARM64
        run: |
          cd flutter
          rm -rf examples/ dev/ docs/
          rm -rf bin/cache/pkg
          rm -rf bin/cache/artifacts/engine/linux-*
          rm -rf bin/cache/artifacts/engine/windows-*
          rm -rf bin/cache/artifacts/engine/darwin-*
          rm -rf bin/cache/artifacts/engine/ios
          # Extra check: ensure no x64 binaries remain
          find bin/cache -type f -exec file {} \; | grep "x86_64" && echo "ERROR: x64 binary found!" && exit 1 || echo "No x64 binaries detected"

      # Step 9: Package Flutter ARM64 SDK
      - name: 游릴 Package Flutter ARM64 SDK
        run: |
          cd flutter
          zip -r9 ../flutter-arm64-full-sdk.zip .

      # Step 10: Verify the packaged ZIP is fully ARM64
      - name: 游릴 Verify ZIP is fully ARM64
        run: |
          unzip -q ../flutter-arm64-full-sdk.zip -d flutter-sdk-unzip
          find flutter-sdk-unzip -type f -exec file {} \; | grep "x86_64" && echo "ERROR: x64 binary found in ZIP!" && exit 1 || echo "ZIP is fully ARM64-native"

      # Step 11: Upload artifact
      - name: 游릴 Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: flutter-arm64-full-sdk
          path: flutter-arm64-full-sdk.zip
