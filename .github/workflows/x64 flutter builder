name: Flutter ARM64 Cross-Compile

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-22.04

    steps:
      # Step 1: Install system dependencies
      - name: 游릴 Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            git curl unzip xz-utils zip python3 clang cmake ninja-build pkg-config \
            libgtk-3-dev liblzma-dev libssl-dev libcurl4-openssl-dev libfreetype6-dev \
            libfontconfig1-dev libc6-dev gcc g++ make file wget

      # Step 2: Clone Flutter stable
      - name: 游릴 Clone Flutter
        run: |
          git clone https://github.com/flutter/flutter.git -b stable --depth 1 flutter

      # Step 3: Setup depot_tools
      - name: 游릴 Setup depot_tools
        run: |
          git clone https://chromium.googlesource.com/chromium/tools/depot_tools.git
          echo "export PATH=$PATH:$(pwd)/depot_tools:$PATH" >> $GITHUB_ENV

      # Step 4: Precache Android + Web engines (temporary Linux host allowed)
      - name: 游릴 Precache engines
        run: |
          cd flutter
          ./bin/flutter precache --android --web --no-ios --no-windows --no-macos --no-linux

      # Step 5: Clone Dart SDK matching Flutter
      - name: 游릴 Clone Flutter Dart
        run: |
          cd flutter
          ./bin/internal/update_dart_sdk.sh
          cd ..

      # Step 6: Cross-compile Dart SDK for ARM64 using GN + Ninja
      - name: 游릴 Cross-compile Dart SDK ARM64
        run: |
          cd flutter/bin/cache/dart-sdk
          git clone https://github.com/dart-lang/sdk.git dart-sdk-src
          cd dart-sdk-src
          # Generate GN build for ARM64
          python3 tools/gn/bootstrap/bootstrap.py --no-clean
          export PATH="$PWD/depot_tools:$PATH"
          gn gen out/arm64 --args='target_cpu="arm64" target_os="linux" is_debug=false'
          ninja -C out/arm64 create_sdk
          cd ../..
          rm -rf flutter/bin/cache/dart-sdk
          mv flutter/bin/cache/dart-sdk/dart-sdk-src/out/arm64 flutter/bin/cache/dart-sdk

      # Step 7: Verify Dart binaries are ARM64
      - name: 游릴 Verify Dart SDK binaries
        run: |
          cd flutter/bin/cache/dart-sdk/bin
          for f in dart dartaotruntime dart_precompiled_runtime; do
            file "$f" | grep "aarch64" || (echo "$f is not ARM64!" && exit 1)
          done

      # Step 8: Trim SDK to Android + Web only
      - name: 游릴 Trim SDK
        run: |
          cd flutter
          rm -rf examples/ dev/ docs/
          rm -rf bin/cache/pkg
          rm -rf bin/cache/artifacts/engine/linux-*
          rm -rf bin/cache/artifacts/engine/windows-*
          rm -rf bin/cache/artifacts/engine/darwin-*
          rm -rf bin/cache/artifacts/engine/ios

      # Step 9: Verify all files in Flutter SDK are ARM64
      - name: 游릴 Verify ARM64 binaries
        run: |
          cd flutter
          while IFS= read -r f; do
            if [ -f "$f" ]; then
              file "$f" | grep "aarch64" || (echo "ERROR: $f is not ARM64!" && exit 1)
            fi
          done < <(find . -type f)

      # Step 10: Package Flutter ARM64 SDK
      - name: 游릴 Package SDK
        run: |
          cd flutter
          zip -r9 ../flutter-arm64-full-sdk.zip .

      # Step 11: Generate SHA256 checksums
      - name: 游릴 Generate SHA256 checksums
        run: |
          unzip -q ../flutter-arm64-full-sdk.zip -d flutter-sdk-unzip
          cd flutter-sdk-unzip
          find . -type f -exec sha256sum {} \; > ../flutter-sdk-checksums.txt
          echo "SHA256 checksums generated"

      # Step 12: Upload artifacts
      - name: 游릴 Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: flutter-arm64-full-sdk
          path: |
            flutter-arm64-full-sdk.zip
            flutter-sdk-checksums.txt
